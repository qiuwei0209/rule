# 必读！！！
# mihomo内核接口文档: https://wiki.metacubex.one/en/config/
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  Airport1:
    url: "机场订阅填到这里，两端引号不要去掉，不要填写到下方链接里去！！"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 单个节点 (默认: DIRECT, REJECT)
proxies:
  # - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: enp6s18
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 为防止使用插件朋友遇到面板问题，我注释掉了此模块。
# 跑裸核朋友自行删除注释即可，使用nikki仅内核的ui路径改为/etc/nikki/run/ui
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/mihomo/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  #使用nikki，混入全部不修改的情况，开启接口指定为nikki
  #使用仅内核自行修改下面三项为true
  #device: nikki
  auto-route: false
  auto-redirect: false
  auto-detect-interface: false

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 222.170.200.68
    - 61.166.150.123
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。

# 节点选择
S1: &S1 {type: select, proxies: [德国故转, 日本故转, 狮城故转, 美国故转, 日本自动, 狮城自动, 美国自动, 全部自动, DIRECT]}
S2: &S2 {type: select, proxies: [DIRECT, 德国故转, 日本故转, 狮城故转, 美国故转, 日本自动, 狮城自动, 美国自动, 全部自动]}
S3: &S3 {type: select, proxies: [DIRECT, 默认代理]}
# 节点筛选
HK: &HK "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"
TW: &TW "(?=.*(台|TW|(?i)Taiwan))^((?!(港|韩|新|美)).)*$"
JP: &JP "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"
SG: &SG "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$"
DE: &DE "(?=.*(德国|德|DE))^((?!(台|港|日|韩|新|深|美)).)*$"
US: &US "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$"
Exclude: &Exclude "^((?!(元|官网|剩余|流量|套餐|订阅|直连|GB|Expire Date|Traffic|ExpireDate)).)*$"
# 机场选择
AirportAll: &AirportAll {include-all: true}
AirportS1: &AirportS1 {include-all: false, use: [ovo]}
# 策略组类型
SD: &SD {type: select}
FB: &FB {type: fallback, tolerance: 20, interval: 300}
AUTO: &AUTO {type: url-test, tolerance: 20, interval: 300}
# ICON: https://github.com/Vbaethon/HOMOMIX
TransferIcon: &TransferIcon "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Transfer.png"
AutoIcon: &AutoIcon "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Auto_Link.png"
AllIcon: &AllIcon "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Global.png"

# 策略组
proxy-groups:
  - {name: 默认代理, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Flight.png"}
  - {name: YouTube, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/YouTube.png"}
  - {name: Google, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Google.png"}
  - {name: AI, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/AI.png"}
  - {name: GitHub, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/GitHub.png"}
  - {name: TikTok, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/TikTok.png"}
  - {name: Telegram, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Telegram.png"}
  - {name: NETFLIX, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Netflix.png"}
  - {name: PayPal, <<: *S1, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/PayPal.png"}
  - {name: Spotify, <<: *S2, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Spotify.png"}
  - {name: OneDrive, <<: *S2, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/OneDrive.png"}
  - {name: Microsoft, <<: *S2, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Microsoft.png"}
  - {name: CloudFlare, <<: *S2, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/CloudFlare.png"}
  - {name: 漏网之鱼, <<: *S3, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Omission.png"}
  # - {name: 香港故转, <<: [*FB, *AirportAll], filter: *HK, icon: *TransferIcon}
  - {name: 德国故转, <<: [*FB, *AirportAll], filter: *DE, icon: *TransferIcon}
  - {name: 日本故转, <<: [*FB, *AirportAll], filter: *JP, icon: *TransferIcon}
  - {name: 狮城故转, <<: [*FB, *AirportAll], filter: *SG, icon: *TransferIcon}
  - {name: 美国故转, <<: [*FB, *AirportAll], filter: *US, icon: *TransferIcon}
  - {name: 德国自动, <<: [*AUTO, *AirportAll], filter: *DE, icon: *AutoIcon}
  # - {name: 香港自动, <<: [*AUTO, *AirportAll], filter: *HK, icon: *AutoIcon}
  - {name: 日本自动, <<: [*AUTO, *AirportAll], filter: *JP, icon: *AutoIcon}
  - {name: 狮城自动, <<: [*AUTO, *AirportAll], filter: *SG, icon: *AutoIcon}
  - {name: 美国自动, <<: [*AUTO, *AirportAll], filter: *US, icon: *AutoIcon}
  - {name: 全部自动, <<: [*AUTO, *AirportAll], filter: *Exclude, icon: *AllIcon}
  # - {name: 香港手动, <<: [*SD, *AirportAll], filter: *HK, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Hong_Kong.png"}
  # - {name: 日本手动, <<: [*SD, *AirportAll], filter: *JP, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Japan.png"}
  # - {name: 狮城手动, <<: [*SD, *AirportAll], filter: *SG, icon: "https://cdn-icons-png.flaticon.com/512/197/197496.png"}
  # - {name: 美国手动, <<: [*SD, *AirportAll], filter: *US, icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/USA.png"}
  # - {name: 🌐 全部节点, <<: [*SD, *AirportAll]}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
# - DOMAIN-SUFFIX,qichiyu.com,默认代理 (临时添加规则)
rules:
  - RULE-SET,private_ip,DIRECT,no-resolve
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,proxylite,默认代理
  - RULE-SET,ai,AI
  - RULE-SET,github_domain,GitHub
  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,google_domain,Google
  - RULE-SET,google_ip,Google,no-resolve
  - RULE-SET,onedrive_domain,OneDrive
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,apple_domain,DIRECT
  - RULE-SET,apple_ip,DIRECT,no-resolve
  - RULE-SET,tiktok_domain,TikTok
  - RULE-SET,spotify_domain,Spotify
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,telegram_ip,Telegram,no-resolve
  - RULE-SET,netflix_domain,NETFLIX
  - RULE-SET,netflix_ip,NETFLIX,no-resolve
  - RULE-SET,paypal_domain,PayPal
  - RULE-SET,cloudflare_domain,CloudFlare
  - RULE-SET,cloudflare_ip,CloudFlare,no-resolve
  - RULE-SET,pt_domain_qv,DIRECT
  - RULE-SET,pt_domain,DIRECT
  - RULE-SET,pt_ip,DIRECT,no-resolve
  - RULE-SET,cn_domain,DIRECT
  - RULE-SET,proxy_domain_qv,默认代理
  - RULE-SET,geolocation-!cn,默认代理
  - RULE-SET,cn_ip,DIRECT
  - MATCH,漏网之鱼

# 规则集 https://github.com/MetaCubeX/meta-rules-dat/tree/meta
## type：可选http/file/inline  behavior：可选domain/ipcidr/classical format：可选yaml/text/mrs
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  qvdomain: &qvdomain {type: http, interval: 86400, behavior: domain, format: text}
rule-providers: 
  ai: {  <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs"}
  apple_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs"}
  cloudflare_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs"}
  cloudflare_ip: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cloudflare.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  private_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"}
  pt_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-pt.mrs"}
  pt_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/pt.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}

  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  pt_domain_qv: { <<: *qvdomain, url: "https://raw.githubusercontent.com/qiuwei0209/rule/refs/heads/master/geosite/pt.list"}
  proxy_domain_qv: { <<: *qvdomain, url: "https://raw.githubusercontent.com/qiuwei0209/rule/refs/heads/master/geosite/proxy.list"}
